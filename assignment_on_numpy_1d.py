# -*- coding: utf-8 -*-
"""Assignment on Numpy-1D.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RaIyaPwWbgyjsCHC9X7bL6aQVgpLS2mL

# 1D Numpy in Python

Estimated time needed: **40** minutes

## Objectives

After completing this lab you will be able to:

*   Import and use the `numpy` library
*   Perform operations with `numpy`

<h2>Table of Contents</h2>
<div class="alert alert-block alert-info" style="margin-thttps://op/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkPY0101ENSkillsNetwork19487395-2021-01-01: 20px">
    <ul>
        <li>
            <a href="#What-is-Numpy?">What is Numpy?</a>
            <ul>
                <li><a href="#Type">Type</a></li>
                <li><a href="#Assign-Value">Assign Value</a></li>
                <li><a href="#Slicing">Slicing</a></li>
                <li><a href="#Assign-Value-with-List">Assign Value with List</a></li>
                <li><a href="#Other-Attributes">Other Attributes</a></li>
            </ul>
        </li>
        <li>
            <a href="#Numpy-Array-Operations">Numpy Array Operations</a>
            <ul>
                <li><a href="#Array-Addition">Array Addition</a></li>
                <li><a href="#Array-Multiplication">Array Multiplication</a></li>
                <li><a href="#Product-of-Two-Numpy-Arrays">Product of Two Numpy Arrays</a></li>
                <li><a href="#Dot-Product">Dot Product</a></li>
                <li><a href="#Adding-Constant-to-a-Numpy-Array">Adding Constant to a Numpy Array</a></li>
            </ul>
        </li>
        <li><a href="#Mathematical-Functions">Mathematical Functions</a></li>
        <li><a href="#Linspace">Linspace</a></li>
    </ul>

</div>

<hr>

## What is Numpy?

NumPy is a Python library used for working with arrays, linear algebra, fourier transform, and matrices. NumPy stands for Numerical Python and it is an open source project. The array object in NumPy is called **ndarray**, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

NumPy is usually imported under the np alias.

It's usually fixed in size and each element is of the same type. We can cast a list to a numpy array by first importing `numpy`:
"""

# import numpy library

import numpy as np

"""We then cast the list as follows:

"""

# Create a numpy array

a = np.array([0, 1, 2, 3, 4])
a

"""Each element is of the same type, in this case integers:

<img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/images/NumOneNp.png" width="500">

As with lists, we can access each element via a square bracket:
"""

# Print each element

print("a[0]:", a[0])
print("a[1]:", a[1])
print("a[2]:", a[2])
print("a[3]:", a[3])
print("a[4]:", a[4])

a[5]

"""#### Checking NumPy Version

The version string is stored under __version__ attribute.

"""

print(np.__version__)

"""### Type

If we check the type of the array we get <b>numpy.ndarray</b>:
"""

# Check the type of the array

type(a)

"""As numpy arrays contain data of the same type, we can use the attribute "dtype" to obtain the data type of the arrayâ€™s elements. In this case, it's a 64-bit integer:

"""

# Check the type of the values stored in numpy array

a.dtype

"""### Try it yourself

Check the type of the array and Value type for the given array **b**

"""

b = np.array([3.1, 11.02, 6.2, 213.2, 5.2])
b

type(b)

# Enter your code here
b.dtype

"""<details><summary>Click here for the solution</summary>

```python
type(b)
    
b.dtype
    
If we examine the attribute dtype we see float 64, as the elements are not integers:
```

</details>

### Assign value

We can change the value of the array. Consider the array <code>c</code>:
"""

# Create numpy array

c = np.array([20, 1, 2, 3, 4])
c

"""We can change the first element of the array to 100 as follows:

"""

# Assign the first element to 100

c[0] = 100
c

"""We can change the 5th element of the array to 0 as follows:

"""

# Assign  0 to the 5th element

c[4] = 0
c

"""### Try it yourself

Assign the value 20 for the second element in the given array.

"""

a = np.array([10, 2, 30, 40,50])

# Enter your code here
a [1] = 20
print(a)

"""<details><summary>Click here for the solution</summary>

```python
a[1]=20
a
   
```

</details>

### Slicing

Like lists, we can slice the numpy array. Slicing in python means taking the elements from the given index to another given index.

We pass slice like this: [start:end].The element at end index is not being included in the output.

We can select the elements from 1 to 3 and assign it to a new numpy array <code>d</code> as follows:
"""

# Slicing the numpy array

d = c[1:4]
d

"""We can assign the corresponding indexes to new values as follows:

"""

# Set the fourth element and fifth element to 300 and 400

c[3:5] = 300, 400
c

"""We can also define the steps in slicing, like this: [start:end:step].

"""

arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr[1:5:2])

"""If we don't pass start, it's considered 0

"""

print(arr[:4])

"""If we don't pass end it's considered till the length of array

"""

print(arr[4:])

"""If we don't pass step it's considered 1

"""

print(arr[1:5:])

"""### Try it yourself

Print the even elements in the given array.

"""

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

# Enter your code here

print(arr[6])

"""<details><summary>Click here for the solution</summary>

```python
print(arr[1:8:2])

    
```

</details>

### Assign Value with List

Similarly, we can use a list to select more than one specific index.
The list `select` contains several values:
"""

# Create the index list

select = [0, 2, 3, 4]
select

"""We can use the list as an argument in the brackets. The output is the elements corresponding to the particular indexes:

"""

# Use list to select elements

d = c[select]
d

"""We can assign the specified elements to a new value. For example, we can assign the values to 100 000 as follows:

"""

# Assign the specified elements to new value

c[select] = 100000
c

"""### Other Attributes

Let's review some basic array attributes using the array <code>a</code>:
"""

# Create a numpy array

a = np.array([0, 1, 2, 3, 4])
a

"""The attribute <code>size</code> is the number of elements in the array:

"""

# Get the size of numpy array

a.size

"""The next two attributes will make more sense when we get to higher dimensions but let's review them. The attribute <code>ndim</code> represents the number of array dimensions, or the rank of the array. In this case, one:

"""

# Get the number of dimensions of numpy array

a.ndim

"""The attribute <code>shape</code> is a tuple of integers indicating the size of the array in each dimension:

"""

# Get the shape/size of numpy array

a.shape

"""### Try it yourself

Find the size ,dimension and shape for the given array **b**

"""

b = np.array([10, 20, 30, 40, 50, 60, 70])

# Enter your code here
b.size
b.ndim
b.shape

"""<details><summary>Click here for the solution</summary>

```python
b.size

b.ndim

b.shape

    
```

</details>

### Numpy Statistical Functions
"""

# Create a numpy array

a = np.array([1, -1, 1, -1])

# Get the mean of numpy array

mean = a.mean()
mean

# Get the standard deviation of numpy array

standard_deviation = a.std()
standard_deviation

# Create a numpy array

b = np.array([-1, 2, 3, 4, 5])
b

# Get the biggest value in the numpy array

max_b = b.max()
max_b

# Get the smallest value in the numpy array

min_b = b.min()
min_b

"""### Try it yourself

Find the sum of maximum and minimum value in the given numpy array

<hr>
"""

c = np.array([-10, 201, 43, 94, 502])

# Enter your code here
min_c = c.min()
max_c = c.max()
Sum = (min_c + max_c)
print(Sum)

"""<details><summary>Click here for the solution</summary>

```python
max_c = c.max()
max_c
    
min_c = c.min()
min_c
    
    
Sum = (max_c +min_c)
Sum

    
```

</details>

## Numpy Array Operations

You could use arithmetic operators directly between NumPy arrays

### Array Addition

Consider the numpy array <code>u</code>:
"""

u = np.array([1, 0])
u

"""Consider the numpy array <code>v</code>:

"""

v = np.array([0, 1])
v

"""We can add the two arrays and assign it to z:

"""

# Numpy Array Addition

z = np.add(u, v)
z

"""The operation is equivalent to vector addition:

"""

# Plotting functions

import time
import sys
import numpy as np

import matplotlib.pyplot as plt

def Plotvec1(u, z, v):

    ax = plt.axes() # to generate the full window axes
    ax.arrow(0, 0, *u, head_width=0.05, color='r', head_length=0.1) # Add an arrow to the  U Axes with arrow head width 0.05, color red and arrow head length 0.1
    plt.text(*(u + 0.1), 'u') # Add the text u to the Axes

    ax.arrow(0, 0, *v, head_width=0.05, color='b', head_length=0.1) # Add an arrow to the  v Axes with arrow head width 0.05, color red and arrow head length 0.1
    plt.text(*(v + 0.1), 'v') # Add the text v to the Axes

    ax.arrow(0, 0, *z, head_width=0.05, head_length=0.1)
    plt.text(*(z + 0.1), 'z') # Add the text z to the Axes
    plt.ylim(-2, 2) # set the ylim to bottom(-2), top(2)
    plt.xlim(-2, 2) # set the xlim to left(-2), right(2)

# Plot numpy arrays

Plotvec1(u, z, v)

"""### Try it yourself

Perform addition operation on the given numpy array arr1 and arr2:

"""

arr1 = np.array([10, 11, 12, 13, 14, 15])
arr2 = np.array([20, 21, 22, 23, 24, 25])

# Enter your code here
arr3 = np.add(arr1, arr2)
arr3

"""<details><summary>Click here for the solution</summary>

```python
arr3 = np.add(arr1, arr2)
arr3

    
```

</details>

### Array Subtraction

Consider the numpy array a:
"""

a = np.array([10, 20, 30])
a

"""Consider the numpy array b:

"""

b = np.array([5, 10, 15])
b

"""We can subtract the two arrays and assign it to c:

"""

c = np.subtract(a, b)

print(c)

"""### Try it yourself

Perform subtraction operation on the given numpy array arr1 and arr2:

"""

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])

# Enter your code here
arr3 = np.subtract(arr1, arr2)
arr3

"""<details><summary>Click here for the solution</summary>

```python
arr3 = np.subtract(arr1, arr2)
arr3

    
```

</details>

### Array Multiplication

Consider the vector numpy array <code>y</code>:
"""

# Create a numpy array

x = np.array([1, 2])
x

# Create a numpy array

y = np.array([2, 1])
y

"""We can multiply every element in the array by 2:

"""

# Numpy Array Multiplication

z = np.multiply(x, y)
z

"""This is equivalent to multiplying a vector by a scaler:

### Try it yourself

Perform multiply operation on the given numpy array arr1 and arr2:
"""

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([2, 1, 2, 3, 4, 5])

# Enter your code here
arr3 = np.multiply(arr1, arr2)
arr3

"""<details><summary>Click here for the solution</summary>

```python
arr3 = np.multiply(arr1, arr2)
arr3

    
```

</details>

### Array Division

Consider the vector numpy array a:
"""

a = np.array([10, 20, 30])
a

"""Consider the vector numpy array b:

"""

b = np.array([2, 10, 5])
b

"""We can divide the two arrays and assign it to c:

"""

c = np.divide(a, b)
c

"""### Try it yourself

Perform division operation on the given numpy array arr1 and arr2:

"""

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 10, 8, 2, 33])

# Enter your code here
arr3 = np.divide(arr1, arr2)
arr3

"""<details><summary>Click here for the solution</summary>

```python
arr3 = np.divide(arr1, arr2)
arr3

    
```

</details>

### Dot Product

The dot product of the two numpy arrays <code>u</code> and <code>v</code> is given by:
"""

X = np.array([1, 2])
Y = np.array([3, 2])

# Calculate the dot product

np.dot(X, Y)

# Elements of X
print(X[0])
print(X[1])

# Elements of Y
print(Y[0])
print(Y[1])

"""We are performing the dot product which is shown as below

<img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/images/dot1.png">

### Try it yourself

Perform dot operation on the given numpy array ar1 and ar2:
"""

arr1 = np.array([3, 5])
arr2 = np.array([2, 4])

# Enter your code here
arr3 = np.dot(arr1, arr2)
arr3

"""<details><summary>Click here for the solution</summary>

```python
arr3 = np.dot(arr1, arr2)
arr3

    
```

</details>

### Adding Constant to a Numpy Array

Consider the following array:
"""

# Create a constant to numpy array

u = np.array([1, 2, 3, -1])
u

"""Adding the constant 1 to each element in the array:

"""

# Add the constant to array

u + 1

"""The process is summarised in the following animation:

<img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/images/NumOneAdd.gif" width="500">

### Try it yourself

Add Constant 5 to the given numpy array ar:
"""

arr = np.array([1, 2, 3, -1])

# Enter your code here
arr + 5

"""<details><summary>Click here for the solution</summary>

```python
arr + 5

    
```

</details>

<hr>

## Mathematical Functions

We can access the value of <code>pi</code> in numpy as follows :
"""

# The value of pi

np.pi

"""We can create the following numpy array in Radians:

"""

# Create the numpy array in radians

x = np.array([0, np.pi/2 , np.pi])

"""We can apply the function <code>sin</code> to the array <code>x</code> and assign the values to the array <code>y</code>; this applies the sine function to each element in the array:

"""

# Calculate the sine of each element

y = np.sin(x)
y

"""<hr>

## Linspace

A useful function for plotting mathematical functions is <code>linspace</code>.   Linspace returns evenly spaced numbers over a specified interval.

 **numpy.linspace(start, stop, num = int value)**

start  :  start of interval range

stop   :  end of interval range

num    :  Number of samples to generate.
"""

# Makeup a numpy array within [-2, 2] and 5 elements

np.linspace(-2, 2, num=5)

"""If we change the parameter <code>num</code> to 9, we get 9 evenly spaced numbers over the interval from -2 to 2:

"""

# Make a numpy array within [-2, 2] and 9 elements

np.linspace(-2, 2, num=9)

"""We can use the function <code>linspace</code> to generate 100 evenly spaced samples from the interval 0 to 2Ï€:

"""

# Make a numpy array within [0, 2Ï€] and 100 elements

x = np.linspace(0, 2*np.pi, num=100)

"""We can apply the sine function to each element in the array <code>x</code> and assign it to the array <code>y</code>:

"""

# Calculate the sine of x list

y = np.sin(x)

# Plot the result

plt.plot(x, y)

"""### Try it yourself

 Make a numpy array within [5, 4] and 6 elements

"""

# Enter your code here
np.linspace(5, 4, num=6)

"""<details><summary>Click here for the solution</summary>

```python
np.linspace(5, 4, num=6)

    
```

</details>

<hr>

### Iterating 1-D Arrays

Iterating means going through elements one by one.

If we iterate on a 1-D array it will go through each element one by one.

If we execute the numpy array, we get in the array format
"""

arr1 = np.array([1, 2, 3])
print(arr1)

"""But if you want to result in the form of the list, then you can use for loop:

"""

for x in arr1:
  print(x)

"""## Quiz on 1D Numpy Array

Implement the following vector subtraction in numpy: u-v
"""

# Write your code below and press Shift+Enter to execute

u = np.array([1, 0])
v = np.array([0, 1])

"""<details><summary>Click here for the solution</summary>

```python
u - v
```

</details>

<hr>

Multiply the numpy array z with -2:
"""

# Write your code below and press Shift+Enter to execute

z = np.array([2, 4])
z = z * -2
print(z)

"""<details><summary>Click here for the solution</summary>

```python
-2 * z
```

</details>

<hr>

Consider the list <code>\[1, 2, 3, 4, 5]</code> and <code>\[1, 0, 1, 0, 1]</code>. Cast both lists to a numpy array then multiply them together:
"""

# Write your code below and press Shift+Enter to execute
list1 = [1, 2, 3, 4, 5]
list2 = [1,0, 1, 0, 1]
array1 = np.array(list1)
array2 = np.array(list2)
result = array1 * array2
print(result)

"""<details><summary>Click here for the solution</summary>

```python
a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 0, 1, 0, 1])
a * b
```

</details>

<hr>
"""

# Import the libraries

import time
import sys
import numpy as np

import matplotlib.pyplot as plt


def Plotvec2(a,b):
    ax = plt.axes()# to generate the full window axes
    ax.arrow(0, 0, *a, head_width=0.05, color ='r', head_length=0.1)#Add an arrow to the  a Axes with arrow head width 0.05, color red and arrow head length 0.1
    plt.text(*(a + 0.1), 'a')
    ax.arrow(0, 0, *b, head_width=0.05, color ='b', head_length=0.1)#Add an arrow to the  b Axes with arrow head width 0.05, color blue and arrow head length 0.1
    plt.text(*(b + 0.1), 'b')
    plt.ylim(-2, 2)#set the ylim to bottom(-2), top(2)
    plt.xlim(-2, 2)#set the xlim to left(-2), right(2)

"""Convert the list <code>\[-1, 1]</code> and <code>\[1, 1]</code> to numpy arrays <code>a</code> and <code>b</code>. Then, plot the arrays as vectors using the fuction <code>Plotvec2</code> and find their dot product:

"""

# Write your code below and press Shift+Enter to execute
import time
import sys
import numpy as np

lista = [-1, 1]
listb = [1, 1]
a = np.array (lista)
b = np.array (listb)
Plotvec2(a,b)
print ("The dot product is", np.dot(a,b))

"""<details><summary>Click here for the solution</summary>

```python


a = np.array([-1, 1])
b = np.array([1, 1])
Plotvec2(a, b)
print("The dot product is", np.dot(a,b))

```

</details>

<hr>

Convert the list <code>\[1, 0]</code> and <code>\[0, 1]</code> to numpy arrays <code>a</code> and <code>b</code>. Then, plot the arrays as vectors using the function <code>Plotvec2</code> and find their dot product:
"""

# Write your code below and press Shift+Enter to execute
lista = [1, 0]
listb = [0, 1]
a = np.array (lista)
b = np.array (listb)
Plotvec2(a,b)
print ("The dot product is", np.dot(a,b))

"""<details><summary>Click here for the solution</summary>

```python
a = np.array([1, 0])
b = np.array([0, 1])
Plotvec2(a, b)
print("The dot product is", np.dot(a, b))

```

</details>

<hr>

Convert the list <code>\[1, 1]</code> and <code>\[0, 1]</code> to numpy arrays <code>a</code> and <code>b</code>. Then plot the arrays as vectors using the fuction <code>Plotvec2</code> and find their dot product:
"""

# Write your code below and press Shift+Enter to execute
lista = [1, 1]
listb = [0, 1]
a = np.array (lista)
b = np.array (listb)
Plotvec2(a,b)
print ("The dot product is", np.dot(a,b))

"""<details><summary>Click here for the solution</summary>

```python
a = np.array([1, 1])
b = np.array([0, 1])
Plotvec2(a, b)
print("The dot product is", np.dot(a, b))

```

</details>

<hr>

Why are the results of the dot product for <code>\[-1, 1]</code> and <code>\[1, 1]</code> and the dot product for <code>\[1, 0]</code> and <code>\[0, 1]</code> zero, but not zero for the dot product for <code>\[1, 1]</code> and <code>\[0, 1]</code>? <p><i>Hint: Study the corresponding figures, pay attention to the direction the arrows are pointing to.</i></p>
"""

# Write your code below and press Shift+Enter to execute

"""The dot product of two vectors depends on the angle between them. If two vectors are perpendicular, the angle between them is 90âˆ˜ and cos90âˆ˜. The product of two vectors depends on the angle between them. If two vectors are perpendicular, the angle between them is 0.

For [-1, 1] and [1, 1], the arrows point diagonally in opposite directions and form a right angle, so the dot product is zero.

for [1, 0] and [o, 1], the arrow pooints right and the other points up, which are also at 90âˆ˜, so the dot products is zero.

For [1, 1] and [0, 1], the arrows are not perpendicular â€” they form an acute angle. Since part of [1, 1] points in the same direction as [0, 1], their dot product is positive and not zero.

In short, the dot product is zero only when the vectors are at right angles to each other.

<details><summary>Click here for the solution</summary>

```python
The vectors used for question 4 and 5 are perpendicular. As a result, the dot product is zero.

```

</details>

Convert the list <code>\[1, 2, 3]</code> and <code>\[8, 9, 10]</code> to numpy arrays <code>arr1</code> and <code>arr2</code>. Then perform <code>Addition</code> , <code>Subtraction</code> , <code>Multiplication</code> , <code>Division</code> and <code>Dot Operation</code> on the <code>arr1</code> and <code>arr2</code>.
"""

# Write your code below and press Shift+Enter to execute
list1 = [1, 2, 3]
list2 = [8, 9, 10]
arr1 = np.array(list1)
arr2 = np.array(list2)

arr3 = np.add(arr1, arr2)
print("Addition:", arr3)

arr4 = np.subtract(arr1, arr2)
print("Subtraction:", arr4)

arr5 = np.multiply(arr1, arr2)
print("Multiplication:", arr5)

arr6 = np.divide(arr1, arr2)
print("Division:", arr6)

arr7 = np.dot(arr1, arr2)
print("Dot Product:", arr7)

"""<details><summary>Click here for the solution</summary>

```python
arr1 = np.array([1, 2, 3])
arr2 = np.array([8, 9, 10])

arr3 = np.add(arr1, arr2)
arr3

arr4 = np.subtract(arr1, arr2)
arr4

arr5 = np.multiply(arr1, arr2)
arr5


arr6 = np.divide(arr1, arr2)
arr6

arr7 = np.dot(arr1, arr2)
arr7
```

</details>

Convert the list <code>\[1, 2, 3, 4, 5]</code> and <code>\[6, 7, 8, 9, 10]</code> to numpy arrays <code>arr1</code> and <code>arr2</code>. Then find the even and odd numbers from <code>arr1</code> and <code>arr2</code>.
"""

# Write your code below and press Shift+Enter to execute

list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]
arr1 = np.array(list1)
arr2 = np.array(list2)

even_arr1 = arr1[arr1 % 2 == 0]
odd_arr1 = arr1[arr1 % 2 != 0]
even_arr2 = arr2[arr2 % 2 == 0]
odd_arr2 = arr2[arr2 % 2 != 0]

print("Even numbers in arr1:", even_arr1)
print("Odd numbers in arr1:", odd_arr1)
print("Even numbers in arr2:", even_arr2)
print("Odd numbers in arr2:", odd_arr2)

"""<details><summary>Click here for the solution</summary>

```python


arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

#Starting index in slice is 1 as first even element(2) in array1 is at index 1
even_arr1 = arr1[1:5:2]
print("even for array1",even_arr1)
    
#Starting index in slice is 0 as first odd element(1) in array1 is at index 0
odd_arr1=arr1[0:5:2]
print("odd for array1",odd_arr1)

#Starting index in slice is 0 as first even element(6) in array2 is at index 0
even_arr2 = arr2[0:5:2]
print("even for array2",even_arr2)
    
    
#Starting index in slice is 1 as first odd element(7) in array2 is at index 1
odd_arr2=arr2[1:5:2]
print("odd for array2",odd_arr2)

```

</details>

<hr>
<h2>The last exercise!</h2>
<p>Congratulations, you have completed your first lesson and hands-on lab in Python.
<hr>
"""

